{"ast":null,"code":"import * as yup from \"yup\";\nconst validationSchema = yup.object({\n  name: yup.string().min(3, \"Минимум 3 символа\").required(\"Название обязательно\"),\n  description: yup.string().min(10, \"Минимум 10 слов\").required(\"Описание обязательно\"),\n  location: yup.string().required(\"Введите местоположение\"),\n  type: yup.string().oneOf([\"Недвижимость\", \"Авто\", \"Услуги\"], \"Выберите корректный тип объявления\").required(\"Выбор типа объявления обязательно\"),\n  image: yup.string().url(\"Некорректная ссылка на изображение\").notRequired(),\n  //Поля для недвижимости\n  propertyType: yup.string().when(\"type\", {\n    is: \"Недвижимость\",\n    then: schema => schema.required(\"Выбор типа недвижимости обязателен\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  area: yup.number().when(\"type\", {\n    is: \"Недвижимость\",\n    then: schema => schema.typeError(\"Площадь должна быть числом\").positive(\"Площадь должна быть положительным числом\").required(\"Площадь обязательна\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  rooms: yup.number().when(\"type\", {\n    is: \"Недвижимость\",\n    then: schema => schema.typeError(\"Количество комнат должно быть числом\").positive(\"Количество комнат должно быть положительным числом\").integer(\"Количество комнат должно быть целым числом\").required(\"Количество комнат обязательно\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  price: yup.number().when(\"type\", {\n    is: \"Недвижимость\",\n    then: schema => schema.typeError(\"Цена должна быть числом\").positive(\"Цена должна быть положительным числом\").required(\"Цена обязательна\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  //Поля для авто\n  brand: yup.string().when(\"type\", {\n    is: \"Авто\",\n    then: schema => schema.min(3, \"Минимум 3 символа\").required(\"Выбор марки обязателен\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  model: yup.string().when(\"type\", {\n    is: \"Авто\",\n    then: schema => schema.min(3, \"Минимум 3 символа\").required(\"Модель обязательна\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  year: yup.number().when(\"type\", {\n    is: \"Авто\",\n    then: schema => schema.typeError(\"Год должен быть числом\").integer(\"Год должен быть целым числом\").min(1885, \"Год не может быть раньше 1885 года\").max(new Date().getFullYear(), \"Год не может быть в будущем\").required(\"Год выпуска обязателен\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  mileage: yup.number().typeError(\"Пробег должен быть числом\").integer(\"Пробег должен быть целым числом\").min(0, \"Пробег не может быть отрицательным\").notRequired(),\n  // поля для услуг\n  serviceType: yup.string().when(\"type\", {\n    is: \"Услуги\",\n    then: schema => schema.min(3, \"Минимум 3 символа\").required(\"Тип услуги обязателен\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  experience: yup.number().when(\"type\", {\n    is: \"Услуги\",\n    then: schema => schema.typeError(\"Опыт работы должен быть числом\").integer(\"Опыт работы должен быть целым числом\").min(0, \"Опыт не может быть отрицательным\").required(\"Опыт работы обязателен\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  cost: yup.number().when(\"type\", {\n    is: \"Услуги\",\n    then: schema => schema.typeError(\"Стоимость должна быть числом\").positive(\"Стоимость должна быть положительной\").required(\"Стоимость услуги обязательна\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  workSchedule: yup.string().matches(/^[а-яА-Яa-zA-Z0-9\\s:-]+$/, \"График работы может содержать только буквы, цифры, пробелы и символы `: -`\").notRequired()\n});\nexport default validationSchema;","map":{"version":3,"names":["yup","validationSchema","object","name","string","min","required","description","location","type","oneOf","image","url","notRequired","propertyType","when","is","then","schema","otherwise","area","number","typeError","positive","rooms","integer","price","brand","model","year","max","Date","getFullYear","mileage","serviceType","experience","cost","workSchedule","matches"],"sources":["/Users/Olga/Desktop/avito-train/client/src/components/Validation/Validation.tsx"],"sourcesContent":["import * as yup from \"yup\";\nimport { Item } from \"../types/types\";\n\nconst validationSchema: yup.ObjectSchema<Item> = yup.object({\n    name: yup.string()\n        .min(3, \"Минимум 3 символа\")\n        .required(\"Название обязательно\"),\n    description: yup.string()\n        .min(10, \"Минимум 10 слов\")\n        .required(\"Описание обязательно\"),\n    location: yup.string()\n        .required(\"Введите местоположение\"),\n    type: yup.string()\n        .oneOf([\"Недвижимость\", \"Авто\", \"Услуги\"] as const, \"Выберите корректный тип объявления\")\n        .required(\"Выбор типа объявления обязательно\"),\n    image: yup.string()\n        .url(\"Некорректная ссылка на изображение\")\n        .notRequired(),\n    //Поля для недвижимости\n    propertyType: yup.string().when(\"type\", {\n        is: \"Недвижимость\",\n        then: schema => schema.required(\"Выбор типа недвижимости обязателен\"),\n        otherwise: schema => schema.notRequired()\n    }),\n    area: yup.number().when(\"type\", {\n        is: \"Недвижимость\",\n        then: schema => schema\n            .typeError(\"Площадь должна быть числом\")\n            .positive(\"Площадь должна быть положительным числом\")\n            .required(\"Площадь обязательна\"),\n        otherwise: schema => schema.notRequired()\n    }),\n    rooms: yup.number().when(\"type\", {\n        is: \"Недвижимость\",\n        then: schema => schema\n            .typeError(\"Количество комнат должно быть числом\")\n            .positive(\"Количество комнат должно быть положительным числом\")\n            .integer(\"Количество комнат должно быть целым числом\")\n            .required(\"Количество комнат обязательно\"),\n        otherwise: schema => schema.notRequired()\n    }),\n    price: yup.number().when(\"type\", {\n        is: \"Недвижимость\",\n        then: schema => schema\n            .typeError(\"Цена должна быть числом\")\n            .positive(\"Цена должна быть положительным числом\")\n            .required(\"Цена обязательна\"),\n        otherwise: schema => schema.notRequired()\n    }),\n    //Поля для авто\n    brand: yup.string().when(\"type\", {\n        is: \"Авто\",\n        then: schema => schema\n            .min(3, \"Минимум 3 символа\")\n            .required(\"Выбор марки обязателен\"),\n        otherwise: schema => schema.notRequired()\n    }),\n    model: yup.string().when(\"type\", {\n        is: \"Авто\",\n        then: schema => schema \n            .min(3, \"Минимум 3 символа\")\n            .required(\"Модель обязательна\"),\n        otherwise: schema => schema.notRequired(),\n    }),\n    year: yup.number().when(\"type\", {\n        is: \"Авто\",\n        then: schema => schema\n            .typeError(\"Год должен быть числом\")\n            .integer(\"Год должен быть целым числом\")\n            .min(1885,\"Год не может быть раньше 1885 года\")\n            .max(new Date().getFullYear(), \"Год не может быть в будущем\")\n            .required(\"Год выпуска обязателен\"),\n        otherwise: schema => schema.notRequired(),\n    }),\n    mileage: yup.number()\n        .typeError(\"Пробег должен быть числом\")\n        .integer(\"Пробег должен быть целым числом\")\n        .min(0, \"Пробег не может быть отрицательным\")\n        .notRequired(),\n    // поля для услуг\n    serviceType: yup.string().when(\"type\", {\n        is: \"Услуги\",\n        then: schema => schema \n            .min(3, \"Минимум 3 символа\")\n            .required(\"Тип услуги обязателен\"),\n        otherwise: schema => schema.notRequired()\n    }),\n    experience: yup.number().when(\"type\", {\n        is: \"Услуги\",\n        then: schema => schema\n            .typeError(\"Опыт работы должен быть числом\")\n            .integer(\"Опыт работы должен быть целым числом\")\n            .min(0, \"Опыт не может быть отрицательным\")\n            .required(\"Опыт работы обязателен\"),\n        otherwise: schema => schema.notRequired(),\n    }), \n    cost: yup.number().when(\"type\", {\n        is: \"Услуги\",\n        then: schema => schema\n            .typeError(\"Стоимость должна быть числом\")\n            .positive(\"Стоимость должна быть положительной\")\n            .required(\"Стоимость услуги обязательна\"),\n        otherwise: schema => schema.notRequired(),\n    }),\n    workSchedule: yup.string()\n        .matches(/^[а-яА-Яa-zA-Z0-9\\s:-]+$/, \"График работы может содержать только буквы, цифры, пробелы и символы `: -`\")\n        .notRequired(),\n})\n\nexport default validationSchema;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}