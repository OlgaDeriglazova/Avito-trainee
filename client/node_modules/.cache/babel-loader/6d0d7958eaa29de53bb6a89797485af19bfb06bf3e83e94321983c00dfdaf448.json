{"ast":null,"code":"import * as yup from \"yup\";\n// Для всех типов\nconst baseSchema = yup.object({\n  name: yup.string().min(3, \"Минимум 3 символа\").required(\"Название обязательно\"),\n  description: yup.string().min(10, \"Минимум 10 символов\").required(\"Описание обязательно\"),\n  location: yup.string().required(\"Введите местоположение\"),\n  type: yup.string().oneOf([\"Недвижимость\", \"Авто\", \"Услуги\"], \"Выберите корректную категорию\").required(\"Выберите категорию\"),\n  image: yup.string().url(\"Некорректная ссылка на изображение\").nullable().notRequired()\n});\n\n// Для недвижимости\nconst realEstateSchema = baseSchema.shape({\n  type: yup.mixed().oneOf([\"Недвижимость\"]).required(),\n  propertyType: yup.string().required(\"Выберите тип недвижимости\"),\n  area: yup.number().typeError(\"Площадь должна быть числом\").positive(\"Площадь должна быть положительной\").required(\"Введите площадь\"),\n  rooms: yup.number().typeError(\"Количество комнат должно быть числом\").integer(\"Должно быть целое число\").required(\"Введите количество комнат\"),\n  price: yup.number().typeError(\"Цена должна быть числом\").positive(\"Цена должна быть положительной\").required(\"Введите цену\")\n});\n\n// Авто\nconst carSchema = baseSchema.shape({\n  type: yup.mixed().oneOf([\"Авто\"]).required(),\n  brand: yup.string().min(3, \"Минимум 3 символа\").required(\"Выберите марку\"),\n  model: yup.string().min(3, \"Минимум 3 символа\").required(\"Введите модель\"),\n  year: yup.number().typeError(\"Год должен быть числом\").integer().min(1885, \"Год не может быть раньше 1885 года\").max(new Date().getFullYear(), \"Год не может быть в будущем\").required(\"Введите год\"),\n  mileage: yup.number().typeError(\"Пробег должен быть числом\").integer().min(0, \"Пробег не может быть отрицательным\").notRequired()\n});\n\n// Услуги\nconst serviceSchema = baseSchema.shape({\n  type: yup.mixed().oneOf([\"Услуги\"]).required(),\n  serviceType: yup.string().min(3, \"Минимум 3 символа\").required(\"Введите тип услуги\"),\n  experience: yup.number().integer().min(0, \"Опыт не может быть отрицательным\").required(\"Введите опыт работы\"),\n  cost: yup.number().positive(\"Стоимость должна быть положительной\").required(\"Введите стоимость\"),\n  workSchedule: yup.string().nullable().notRequired()\n});\n// const validationSchema: yup.ObjectSchema<Item> = yup.object().shape({\n//     name: yup.string()\n//         .min(3, \"Минимум 3 символа\")\n//         .required(\"Название обязательно\"),\n//     description: yup.string()\n//         .min(10, \"Минимум 10 символов\")\n//         .required(\"Описание обязательно\"),\n//     location: yup.string()\n//         .required(\"Введите местоположение\"),\n//     type: yup.string()\n//         .oneOf([\"Недвижимость\", \"Авто\", \"Услуги\"], \"Выберите корректный тип объявления\")\n//         .required(\"Выбор типа объявления обязательно\"),\n//     image: yup.string()\n//         .url(\"Некорректная ссылка на изображение\")\n//         .nullable()\n//         .notRequired(),\n//     //Поля для недвижимости\n//     propertyType: yup.string().when(\"type\", {\n//         is: \"Недвижимость\",\n//         then: schema => schema.required(\"Выбор типа недвижимости обязателен\"),\n//         otherwise: schema => schema.notRequired()\n//     }),\n//     area: yup.number().when(\"type\", {\n//             is: \"Недвижимость\",\n//             then: schema => schema\n//                 .typeError(\"Площадь должна быть числом\")\n//                 .positive(\"Площадь должна быть положительным числом\")\n//                 .required(\"Площадь обязательна\"),\n//             otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     rooms: yup.number().when(\"type\", {\n//         is: \"Недвижимость\",\n//         then: schema => schema\n//             .typeError(\"Количество комнат должно быть числом\")\n//             .positive(\"Количество комнат должно быть положительным числом\")\n//             .integer(\"Количество комнат должно быть целым числом\")\n//             .required(\"Количество комнат обязательно\"),\n//         otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     price: yup.number().when(\"type\", {\n//         is: \"Недвижимость\",\n//         then: schema => schema\n//             .typeError(\"Цена должна быть числом\")\n//             .positive(\"Цена должна быть положительным числом\")\n//             .required(\"Цена обязательна\"),\n//         otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     //Поля для авто\n//     brand: yup.string().when(\"type\", {\n//         is: \"Авто\",\n//         then: schema => schema\n//             .min(3, \"Минимум 3 символа\")\n//             .required(\"Выбор марки обязателен\"),\n//         otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     model: yup.string().when(\"type\", {\n//         is: \"Авто\",\n//         then: schema => schema \n//             .min(3, \"Минимум 3 символа\")\n//             .required(\"Модель обязательна\"),\n//         otherwise: schema => schema.nullable().notRequired(),\n//     }),\n//     year: yup.number().when(\"type\", {\n//         is: \"Авто\",\n//         then: schema => schema\n//             .typeError(\"Год должен быть числом\")\n//             .integer(\"Год должен быть целым числом\")\n//             .min(1885,\"Год не может быть раньше 1885 года\")\n//             .max(new Date().getFullYear(), \"Год не может быть в будущем\")\n//             .required(\"Год выпуска обязателен\"),\n//         otherwise: schema => schema.nullable().notRequired(),\n//     }),\n//     mileage: yup.number()\n//         .typeError(\"Пробег должен быть числом\")\n//         .integer(\"Пробег должен быть целым числом\")\n//         .min(0, \"Пробег не может быть отрицательным\")\n//         .nullable()\n//         .notRequired(),\n//     // поля для услуг\n//     serviceType: yup.string().when(\"type\", {\n//         is: \"Услуги\",\n//         then: schema => schema \n//             .min(3, \"Минимум 3 символа\")\n//             .required(\"Тип услуги обязателен\"),\n//         otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     experience: yup.number().when(\"type\", {\n//         is: \"Услуги\",\n//         then: schema => schema\n//             .typeError(\"Опыт работы должен быть числом\")\n//             .integer(\"Опыт работы должен быть целым числом\")\n//             .min(0, \"Опыт не может быть отрицательным\")\n//             .required(\"Опыт работы обязателен\"),\n//         otherwise: schema => schema.nullable().notRequired(),\n//     }), \n//     cost: yup.number().when(\"type\", {\n//         is: \"Услуги\",\n//         then: schema => schema\n//             .typeError(\"Стоимость должна быть числом\")\n//             .positive(\"Стоимость должна быть положительной\")\n//             .required(\"Стоимость услуги обязательна\"),\n//         otherwise: schema => schema.nullable().notRequired(),\n//     }),\n//     workSchedule: yup.string().when(\"type\", {\n//         is: \"Услуги\",\n//         then: schema => schema\n//             .matches(/^[а-яА-Яa-zA-Z0-9\\s:-]+$/, \"График работы может содержать только буквы, цифры, пробелы и символы `: -`\")\n//             .nullable()\n//             .notRequired(),\n//     })\n// });\n\nexport default validationSchema;","map":{"version":3,"names":["yup","baseSchema","object","name","string","min","required","description","location","type","oneOf","image","url","nullable","notRequired","realEstateSchema","shape","mixed","propertyType","area","number","typeError","positive","rooms","integer","price","carSchema","brand","model","year","max","Date","getFullYear","mileage","serviceSchema","serviceType","experience","cost","workSchedule","validationSchema"],"sources":["/Users/Olga/Desktop/avito-train/client/src/components/Validation/Validation.tsx"],"sourcesContent":["import * as yup from \"yup\";\nimport { Item } from \"../types/types\";\n\n// Для всех типов\nconst baseSchema = yup.object({\n    name: yup.string()\n        .min(3, \"Минимум 3 символа\")\n        .required(\"Название обязательно\"),\n    description: yup.string()\n        .min(10, \"Минимум 10 символов\")\n        .required(\"Описание обязательно\"),\n    location: yup.string()\n        .required(\"Введите местоположение\"),\n    type: yup.string()\n        .oneOf([\"Недвижимость\", \"Авто\", \"Услуги\"], \"Выберите корректную категорию\")\n        .required(\"Выберите категорию\"),\n    image: yup.string()\n        .url(\"Некорректная ссылка на изображение\")\n        .nullable()\n        .notRequired(),\n  });\n\n// Для недвижимости\nconst realEstateSchema = baseSchema.shape({\n    type: yup.mixed<\"Недвижимость\">()\n        .oneOf([\"Недвижимость\"])\n        .required(),\n    propertyType: yup.string()\n        .required(\"Выберите тип недвижимости\"),\n    area: yup.number()\n        .typeError(\"Площадь должна быть числом\")\n        .positive(\"Площадь должна быть положительной\")\n        .required(\"Введите площадь\"),\n    rooms: yup.number()\n        .typeError(\"Количество комнат должно быть числом\")\n        .integer(\"Должно быть целое число\")\n        .required(\"Введите количество комнат\"),\n    price: yup.number()\n        .typeError(\"Цена должна быть числом\")\n        .positive(\"Цена должна быть положительной\")\n        .required(\"Введите цену\"),\n  });\n\n// Авто\nconst carSchema = baseSchema.shape({\n    type: yup.mixed<\"Авто\">().oneOf([\"Авто\"]).required(),\n    brand: yup.string()\n        .min(3, \"Минимум 3 символа\")\n        .required(\"Выберите марку\"),\n    model: yup.string()\n        .min(3, \"Минимум 3 символа\")\n        .required(\"Введите модель\"),\n    year: yup.number()\n        .typeError(\"Год должен быть числом\")\n        .integer()\n        .min(1885, \"Год не может быть раньше 1885 года\")\n        .max(new Date().getFullYear(), \"Год не может быть в будущем\")\n        .required(\"Введите год\"),\n    mileage: yup.number()\n        .typeError(\"Пробег должен быть числом\")\n        .integer()\n        .min(0, \"Пробег не может быть отрицательным\")\n        .notRequired(),\n  });\n\n// Услуги\nconst serviceSchema = baseSchema.shape({\n    type: yup.mixed<\"Услуги\">().oneOf([\"Услуги\"]).required(),\n    serviceType: yup.string()\n        .min(3, \"Минимум 3 символа\")\n        .required(\"Введите тип услуги\"),\n    experience: yup.number()\n        .integer()\n        .min(0, \"Опыт не может быть отрицательным\")\n        .required(\"Введите опыт работы\"),\n    cost: yup.number()\n        .positive(\"Стоимость должна быть положительной\")\n        .required(\"Введите стоимость\"),\n    workSchedule: yup.string()\n        .nullable()\n        .notRequired(),\n  });\n// const validationSchema: yup.ObjectSchema<Item> = yup.object().shape({\n//     name: yup.string()\n//         .min(3, \"Минимум 3 символа\")\n//         .required(\"Название обязательно\"),\n//     description: yup.string()\n//         .min(10, \"Минимум 10 символов\")\n//         .required(\"Описание обязательно\"),\n//     location: yup.string()\n//         .required(\"Введите местоположение\"),\n//     type: yup.string()\n//         .oneOf([\"Недвижимость\", \"Авто\", \"Услуги\"], \"Выберите корректный тип объявления\")\n//         .required(\"Выбор типа объявления обязательно\"),\n//     image: yup.string()\n//         .url(\"Некорректная ссылка на изображение\")\n//         .nullable()\n//         .notRequired(),\n//     //Поля для недвижимости\n//     propertyType: yup.string().when(\"type\", {\n//         is: \"Недвижимость\",\n//         then: schema => schema.required(\"Выбор типа недвижимости обязателен\"),\n//         otherwise: schema => schema.notRequired()\n//     }),\n//     area: yup.number().when(\"type\", {\n//             is: \"Недвижимость\",\n//             then: schema => schema\n//                 .typeError(\"Площадь должна быть числом\")\n//                 .positive(\"Площадь должна быть положительным числом\")\n//                 .required(\"Площадь обязательна\"),\n//             otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     rooms: yup.number().when(\"type\", {\n//         is: \"Недвижимость\",\n//         then: schema => schema\n//             .typeError(\"Количество комнат должно быть числом\")\n//             .positive(\"Количество комнат должно быть положительным числом\")\n//             .integer(\"Количество комнат должно быть целым числом\")\n//             .required(\"Количество комнат обязательно\"),\n//         otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     price: yup.number().when(\"type\", {\n//         is: \"Недвижимость\",\n//         then: schema => schema\n//             .typeError(\"Цена должна быть числом\")\n//             .positive(\"Цена должна быть положительным числом\")\n//             .required(\"Цена обязательна\"),\n//         otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     //Поля для авто\n//     brand: yup.string().when(\"type\", {\n//         is: \"Авто\",\n//         then: schema => schema\n//             .min(3, \"Минимум 3 символа\")\n//             .required(\"Выбор марки обязателен\"),\n//         otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     model: yup.string().when(\"type\", {\n//         is: \"Авто\",\n//         then: schema => schema \n//             .min(3, \"Минимум 3 символа\")\n//             .required(\"Модель обязательна\"),\n//         otherwise: schema => schema.nullable().notRequired(),\n//     }),\n//     year: yup.number().when(\"type\", {\n//         is: \"Авто\",\n//         then: schema => schema\n//             .typeError(\"Год должен быть числом\")\n//             .integer(\"Год должен быть целым числом\")\n//             .min(1885,\"Год не может быть раньше 1885 года\")\n//             .max(new Date().getFullYear(), \"Год не может быть в будущем\")\n//             .required(\"Год выпуска обязателен\"),\n//         otherwise: schema => schema.nullable().notRequired(),\n//     }),\n//     mileage: yup.number()\n//         .typeError(\"Пробег должен быть числом\")\n//         .integer(\"Пробег должен быть целым числом\")\n//         .min(0, \"Пробег не может быть отрицательным\")\n//         .nullable()\n//         .notRequired(),\n//     // поля для услуг\n//     serviceType: yup.string().when(\"type\", {\n//         is: \"Услуги\",\n//         then: schema => schema \n//             .min(3, \"Минимум 3 символа\")\n//             .required(\"Тип услуги обязателен\"),\n//         otherwise: schema => schema.nullable().notRequired()\n//     }),\n//     experience: yup.number().when(\"type\", {\n//         is: \"Услуги\",\n//         then: schema => schema\n//             .typeError(\"Опыт работы должен быть числом\")\n//             .integer(\"Опыт работы должен быть целым числом\")\n//             .min(0, \"Опыт не может быть отрицательным\")\n//             .required(\"Опыт работы обязателен\"),\n//         otherwise: schema => schema.nullable().notRequired(),\n//     }), \n//     cost: yup.number().when(\"type\", {\n//         is: \"Услуги\",\n//         then: schema => schema\n//             .typeError(\"Стоимость должна быть числом\")\n//             .positive(\"Стоимость должна быть положительной\")\n//             .required(\"Стоимость услуги обязательна\"),\n//         otherwise: schema => schema.nullable().notRequired(),\n//     }),\n//     workSchedule: yup.string().when(\"type\", {\n//         is: \"Услуги\",\n//         then: schema => schema\n//             .matches(/^[а-яА-Яa-zA-Z0-9\\s:-]+$/, \"График работы может содержать только буквы, цифры, пробелы и символы `: -`\")\n//             .nullable()\n//             .notRequired(),\n//     })\n// });\n\nexport default validationSchema;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}