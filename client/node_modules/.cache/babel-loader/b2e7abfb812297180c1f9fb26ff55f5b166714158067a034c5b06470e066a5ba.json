{"ast":null,"code":"import * as yup from \"yup\";\nconst validationSchema = yup.object({\n  // Общие поля\n  name: yup.string().min(3, \"Минимум 3 символа\").required(\"Название обязательно\"),\n  description: yup.string().min(10, \"Минимум 10 символов\").required(\"Описание обязательно\"),\n  location: yup.string().required(\"Введите местоположение\"),\n  type: yup.string().oneOf([\"Недвижимость\", \"Авто\", \"Услуги\"], \"Выберите корректный тип объявления\").required(\"Выбор типа объявления обязательно\"),\n  image: yup.string().url(\"Некорректная ссылка на изображение\").nullable().notRequired(),\n  //Поля для недвижимости\n  propertyType: yup.string().when(\"type\", {\n    is: \"Недвижимость\",\n    then: schema => schema.required(\"Выбор типа недвижимости обязателен\"),\n    otherwise: schema => schema.notRequired()\n  }),\n  area: yup.number().when(\"type\", {\n    is: \"Недвижимость\",\n    then: schema => schema.typeError(\"Площадь должна быть числом\").positive(\"Площадь должна быть положительным числом\").required(\"Площадь обязательна\"),\n    otherwise: schema => schema.nullable().notRequired()\n  }),\n  rooms: yup.number().when(\"type\", {\n    is: \"Недвижимость\",\n    then: schema => schema.typeError(\"Количество комнат должно быть числом\").positive(\"Количество комнат должно быть положительным числом\").integer(\"Количество комнат должно быть целым числом\").required(\"Количество комнат обязательно\"),\n    otherwise: schema => schema.nullable().notRequired()\n  }),\n  price: yup.number().when(\"type\", {\n    is: \"Недвижимость\",\n    then: schema => schema.typeError(\"Цена должна быть числом\").positive(\"Цена должна быть положительным числом\").required(\"Цена обязательна\"),\n    otherwise: schema => schema.nullable().notRequired()\n  }),\n  //Поля для авто\n  brand: yup.string().when(\"type\", {\n    is: \"Авто\",\n    then: schema => schema.required(\"Выбор марки обязателен\"),\n    otherwise: schema => schema.nullable().notRequired()\n  }),\n  model: yup.string().when(\"type\", {\n    is: \"Авто\",\n    then: schema => schema.min(3, \"Минимум 3 символа\").required(\"Модель обязательна\"),\n    otherwise: schema => schema.nullable().notRequired()\n  }),\n  year: yup.number().when(\"type\", {\n    is: \"Авто\",\n    then: schema => schema.typeError(\"Год должен быть числом\").integer(\"Год должен быть целым числом\").min(1885, \"Год не может быть раньше 1885 года\").max(new Date().getFullYear(), \"Год не может быть в будущем\").required(\"Год выпуска обязателен\"),\n    otherwise: schema => schema.nullable().notRequired()\n  }),\n  mileage: yup.number().typeError(\"Пробег должен быть числом\").integer(\"Пробег должен быть целым числом\").min(0, \"Пробег не может быть отрицательным\").nullable().notRequired(),\n  // поля для услуг\n  serviceType: yup.string().when(\"type\", {\n    is: \"Услуги\",\n    then: schema => schema.min(3, \"Минимум 3 символа\").required(\"Тип услуги обязателен\"),\n    otherwise: schema => schema.nullable().notRequired()\n  }),\n  experience: yup.number().when(\"type\", {\n    is: \"Услуги\",\n    then: schema => schema.typeError(\"Опыт работы должен быть числом\").integer(\"Опыт работы должен быть целым числом\").min(0, \"Опыт не может быть отрицательным\").required(\"Опыт работы обязателен\"),\n    otherwise: schema => schema.nullable().notRequired()\n  }),\n  cost: yup.number().when(\"type\", {\n    is: \"Услуги\",\n    then: schema => schema.typeError(\"Стоимость должна быть числом\").positive(\"Стоимость должна быть положительной\").required(\"Стоимость услуги обязательна\"),\n    otherwise: schema => schema.nullable().notRequired()\n  }),\n  workSchedule: yup.string().when(\"type\", {\n    is: \"Услуги\",\n    then: schema => schema.matches(/^[а-яА-Яa-zA-Z0-9\\s:-]+$/, \"График работы может содержать только буквы, цифры, пробелы и символы `: -`\").nullable().notRequired()\n  })\n});\nexport default validationSchema;","map":{"version":3,"names":["yup","validationSchema","object","name","string","min","required","description","location","type","oneOf","image","url","nullable","notRequired","propertyType","when","is","then","schema","otherwise","area","number","typeError","positive","rooms","integer","price","brand","model","year","max","Date","getFullYear","mileage","serviceType","experience","cost","workSchedule","matches"],"sources":["/Users/Olga/Desktop/avito-train/client/src/components/Validation/Validation.tsx"],"sourcesContent":["import * as yup from \"yup\";\n\nconst validationSchema = yup.object({\n\n    // Общие поля\n    name: yup.string()\n        .min(3, \"Минимум 3 символа\")\n        .required(\"Название обязательно\"),\n    description: yup.string()\n        .min(10, \"Минимум 10 символов\")\n        .required(\"Описание обязательно\"),\n    location: yup.string()\n        .required(\"Введите местоположение\"),\n    type: yup.string()\n        .oneOf([\"Недвижимость\", \"Авто\", \"Услуги\"], \"Выберите корректный тип объявления\")\n        .required(\"Выбор типа объявления обязательно\"),\n    image: yup.string()\n        .url(\"Некорректная ссылка на изображение\")\n        .nullable()\n        .notRequired(),\n\n    //Поля для недвижимости\n    propertyType: yup.string().when(\"type\", {\n        is: \"Недвижимость\",\n        then: schema => schema.required(\"Выбор типа недвижимости обязателен\"),\n        otherwise: schema => schema.notRequired()\n    }),\n    area: yup.number().when(\"type\", {\n        is: \"Недвижимость\",\n        then: schema => schema\n            .typeError(\"Площадь должна быть числом\")\n            .positive(\"Площадь должна быть положительным числом\")\n            .required(\"Площадь обязательна\"),\n        otherwise: schema => schema.nullable().notRequired()\n    }),\n    rooms: yup.number().when(\"type\", {\n        is: \"Недвижимость\",\n        then: schema => schema\n            .typeError(\"Количество комнат должно быть числом\")\n            .positive(\"Количество комнат должно быть положительным числом\")\n            .integer(\"Количество комнат должно быть целым числом\")\n            .required(\"Количество комнат обязательно\"),\n        otherwise: schema => schema.nullable().notRequired()\n    }),\n    price: yup.number().when(\"type\", {\n        is: \"Недвижимость\",\n        then: schema => schema\n            .typeError(\"Цена должна быть числом\")\n            .positive(\"Цена должна быть положительным числом\")\n            .required(\"Цена обязательна\"),\n        otherwise: schema => schema.nullable().notRequired()\n    }),\n\n    //Поля для авто\n    brand: yup.string().when(\"type\", {\n        is: \"Авто\",\n        then: schema => schema\n            .required(\"Выбор марки обязателен\"),\n        otherwise: schema => schema.nullable().notRequired()\n    }),\n    model: yup.string().when(\"type\", {\n        is: \"Авто\",\n        then: schema => schema \n            .min(3, \"Минимум 3 символа\")\n            .required(\"Модель обязательна\"),\n        otherwise: schema => schema.nullable().notRequired(),\n    }),\n    year: yup.number().when(\"type\", {\n        is: \"Авто\",\n        then: schema => schema\n            .typeError(\"Год должен быть числом\")\n            .integer(\"Год должен быть целым числом\")\n            .min(1885,\"Год не может быть раньше 1885 года\")\n            .max(new Date().getFullYear(), \"Год не может быть в будущем\")\n            .required(\"Год выпуска обязателен\"),\n        otherwise: schema => schema.nullable().notRequired(),\n    }),\n    mileage: yup.number()\n        .typeError(\"Пробег должен быть числом\")\n        .integer(\"Пробег должен быть целым числом\")\n        .min(0, \"Пробег не может быть отрицательным\")\n        .nullable()\n        .notRequired(),\n\n    // поля для услуг\n    serviceType: yup.string().when(\"type\", {\n        is: \"Услуги\",\n        then: schema => schema \n            .min(3, \"Минимум 3 символа\")\n            .required(\"Тип услуги обязателен\"),\n        otherwise: schema => schema.nullable().notRequired()\n    }),\n    experience: yup.number().when(\"type\", {\n        is: \"Услуги\",\n        then: schema => schema\n            .typeError(\"Опыт работы должен быть числом\")\n            .integer(\"Опыт работы должен быть целым числом\")\n            .min(0, \"Опыт не может быть отрицательным\")\n            .required(\"Опыт работы обязателен\"),\n        otherwise: schema => schema.nullable().notRequired(),\n    }), \n    cost: yup.number().when(\"type\", {\n        is: \"Услуги\",\n        then: schema => schema\n            .typeError(\"Стоимость должна быть числом\")\n            .positive(\"Стоимость должна быть положительной\")\n            .required(\"Стоимость услуги обязательна\"),\n        otherwise: schema => schema.nullable().notRequired(),\n    }),\n    workSchedule: yup.string().when(\"type\", {\n        is: \"Услуги\",\n        then: schema => schema\n            .matches(/^[а-яА-Яa-zA-Z0-9\\s:-]+$/, \"График работы может содержать только буквы, цифры, пробелы и символы `: -`\")\n            .nullable()\n            .notRequired(),\n    })\n});\nexport default validationSchema;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}